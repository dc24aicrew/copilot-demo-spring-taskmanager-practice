server:
  port: 8081

spring:
  application:
    name: user-service
  profiles:
    active: dev
    
  # Config client configuration
  config:
    import: optional:configserver:http://${CONFIG_USERNAME:config}:${CONFIG_PASSWORD:config123}@${CONFIG_HOST:localhost}:${CONFIG_PORT:8888}

  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:user_service_db}
    username: ${DB_USERNAME:taskmanager}
    password: ${DB_PASSWORD:taskmanager}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 1200000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        jdbc:
          time_zone: UTC
        dialect: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false

  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    baseline-version: 1

  security:
    jwt:
      secret: ${JWT_SECRET:demo-secret-key-change-in-production-minimum-32-characters}
      expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
      refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days

  # Enhanced Redis configuration for caching
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:1}
      timeout: 3000ms
      connect-timeout: 2000ms
      ssl:
        enabled: ${REDIS_SSL_ENABLED:false}
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2
          max-wait: 2000ms
        shutdown-timeout: 100ms

  cache:
    type: redis
    cache-names:
      - users
      - auth
      - jwt-blacklist
    redis:
      time-to-live: 10m
      key-prefix: "user-service:"
      use-key-prefix: true
      cache-null-values: false

  # Jackson configuration for consistent JSON serialization
  jackson:
    serialization:
      write-dates-as-timestamps: false
    default-property-inclusion: non_null

# Eureka client configuration
eureka:
  instance:
    hostname: ${USER_SERVICE_HOSTNAME:localhost}
    prefer-ip-address: false
    metadata-map:
      zone: ${EUREKA_ZONE:zone1}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://${EUREKA_USERNAME:admin}:${EUREKA_PASSWORD:admin123}@${EUREKA_HOST:localhost}:${EUREKA_PORT:8761}/eureka/

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,caches
  endpoint:
    health:
      show-details: when_authorized
  info:
    env:
      enabled: true

# Logging configuration
logging:
  level:
    com.demo.copilot.taskmanager.user: DEBUG
    org.springframework.security: INFO
    org.hibernate.SQL: DEBUG
    org.springframework.cloud: INFO
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n%wEx"
  file:
    name: logs/user-service.log

# OpenAPI documentation
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
  info:
    title: User Service API
    description: Microservice for user management and authentication
    version: 1.0.0
    contact:
      name: Demo Team
      email: demo@example.com

# Application specific configurations
app:
  security:
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001,http://localhost:8080}
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: "*"
      allow-credentials: true
      max-age: 3600
  
  pagination:
    default-page-size: 20
    max-page-size: 100

---
# Development profile
spring:
  config:
    activate:
      on-profile: dev
      
  # Use H2 for development if PostgreSQL is not available
  datasource:
    url: jdbc:h2:mem:userdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driver-class-name: org.h2.Driver
    username: sa
    password: 
    
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
    
  flyway:
    enabled: false
    
  # Use simple cache for development if Redis is not available
  cache:
    type: ${CACHE_TYPE:simple}
      
logging:
  level:
    com.demo.copilot.taskmanager.user: DEBUG
    org.springframework.web: DEBUG

---
# Docker profile  
spring:
  config:
    activate:
      on-profile: docker
      
  config:
    import: optional:configserver:http://${CONFIG_USERNAME:config}:${CONFIG_PASSWORD:config123}@config-server:8888

  datasource:
    url: jdbc:postgresql://postgres:5432/user_service_db

eureka:
  instance:
    hostname: user-service
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://${EUREKA_USERNAME:admin}:${EUREKA_PASSWORD:admin123}@eureka-server:8761/eureka/

spring.data.redis:
  host: redis

---
# Production profile
spring:
  config:
    activate:
      on-profile: prod

logging:
  level:
    com.demo.copilot.taskmanager.user: INFO
    org.springframework.security: WARN
    org.hibernate: WARN
  file:
    name: /var/log/user-service/application.log