server:
  port: 8080

spring:
  application:
    name: api-gateway
  profiles:
    active: dev
    
  # Config client configuration
  config:
    import: optional:configserver:http://${CONFIG_USERNAME:config}:${CONFIG_PASSWORD:config123}@${CONFIG_HOST:localhost}:${CONFIG_PORT:8888}
  
  # Cloud Gateway Configuration
  cloud:
    gateway:
      # Global CORS configuration
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origins: 
              - "http://localhost:3000"
              - "http://localhost:3001"
              - "http://localhost:8080"
            allowed-methods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowed-headers: "*"
            allow-credentials: true
            max-age: 3600
      
      # Route definitions
      routes:
        # User Service Routes
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/users/**,/api/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: user-service
                fallbackUri: forward:/fallback/user-service
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY,INTERNAL_SERVER_ERROR
                methods: GET,POST
        
        # Task Service Routes  
        - id: task-service
          uri: lb://task-service
          predicates:
            - Path=/api/tasks/**
          filters:
            - name: CircuitBreaker
              args:
                name: task-service
                fallbackUri: forward:/fallback/task-service
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 15
                redis-rate-limiter.burstCapacity: 30
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY,INTERNAL_SERVER_ERROR
                methods: GET,POST
        
        # Notification Service Routes
        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/api/notifications/**
          filters:
            - name: CircuitBreaker
              args:
                name: notification-service
                fallbackUri: forward:/fallback/notification-service
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
                redis-rate-limiter.requestedTokens: 1
                key-resolver: "#{@userKeyResolver}"
      
      # Discovery configuration
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true

  # Redis configuration for rate limiting
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      database: ${REDIS_DATABASE:0}
      timeout: 3000ms

  # Security configuration
  security:
    jwt:
      secret: ${JWT_SECRET:demo-secret-key-change-in-production-minimum-32-characters}

# Eureka client configuration
eureka:
  instance:
    hostname: ${GATEWAY_HOSTNAME:localhost}
    prefer-ip-address: false
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://${EUREKA_USERNAME:admin}:${EUREKA_PASSWORD:admin123}@${EUREKA_HOST:localhost}:${EUREKA_PORT:8761}/eureka/

# Circuit breaker configuration
resilience4j:
  circuitbreaker:
    instances:
      user-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      task-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
      notification-service:
        sliding-window-size: 10
        minimum-number-of-calls: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,gateway,circuitbreakers
  endpoint:
    health:
      show-details: always
    gateway:
      enabled: true
  info:
    env:
      enabled: true

# Logging configuration
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.cloud.netflix: INFO
    com.demo.copilot.taskmanager: DEBUG
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"

---
# Development profile
spring:
  config:
    activate:
      on-profile: dev

# Use simple rate limiting for dev if Redis is not available
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: lb://user-service
          predicates:
            - Path=/api/users/**,/api/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: user-service

---
# Docker profile  
spring:
  config:
    activate:
      on-profile: docker
      
  config:
    import: optional:configserver:http://${CONFIG_USERNAME:config}:${CONFIG_PASSWORD:config123}@config-server:8888

eureka:
  instance:
    hostname: api-gateway
    prefer-ip-address: true
  client:
    service-url:
      defaultZone: http://${EUREKA_USERNAME:admin}:${EUREKA_PASSWORD:admin123}@eureka-server:8761/eureka/

spring.data.redis:
  host: redis

---
# Production profile
spring:
  config:
    activate:
      on-profile: prod

logging:
  level:
    org.springframework.cloud.gateway: INFO
    com.demo.copilot.taskmanager: INFO